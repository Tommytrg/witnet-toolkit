const helpers = require("../helpers")
const qrcode = require('qrcode-terminal');
const toolkit = require("../../../dist");

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// CLI SUBMODULE CONSTANTS ===========================================================================================

module.exports = {
    flags: {
        fee: {
            hint: "Qualify how much fee to pay per transaction: stinky|low|medium|high|opulent (default: medium)",
            param: ":fee_tag",
        },
        path: {
            hint: "Derive spending address from BIP-32 path",
            param: "m/:path"
        },
        provider: {
            hint: "Public Wit/Oracle JSON-RPC provider, other than default",
            param: ":http-url",
        },
    },
    router: {
        address: {
            hint: "Show wallet's public key hash address."
        },
        balance: {
            hint: "Show wallet's available balance.",
        },
        resolve: {
            hint: "Ask the Wit/Oracle to resolve and forever store the resolution to a Radon artifact.",
            params: ["RADON_ASSET_NAME | RAD_HASH | BYTECODE", "[ASSET_ARGS ...]", ],
            options: {
                "deadline": { 
                    hint: "Deadline epoch for the data request transaction to get mined", 
                    param: "EPOCH",
                },
                "num-witnesses": { 
                    hint: "Number of witnesses obliged to attend the data request", 
                    param: "NUM_WITNESSES"
                },
                "total-fees": {
                    hint: "Settle total fees to cover the cost of all involved transactions: DRT, DRCTs and DRRTs",
                    param: "NANOWITS",
                },
            }
        },
        stake: {
            hint: "Stake specified amount of Wits by using given authorization code.",
            params: "NANOWITS",
            options: { 
                authorization: { 
                    hint: "Stake authorization code as generated by a validator", 
                    param: ":hexstring"
                },
                withdrawer: {
                    hint: "(Optional) Address allowed to withdraw the stake",
                    param: ":pkh"
                },
            }
        },
        transfer: {
            hint: "Transfer specified amount of Wits to given address.",
            params: "NANOWITS",
            options: {
                to: {
                    hint: "Destination address",
                    param: ":pkh",
                },
            },
        },
        unstake: {
            hint: "Unstake specified amount of Wits from given validator",
            params: "NANOWITS",
            options: {
                validator: {
                    hint: "Validator address from where to withdraw the stake",
                    param: ":pkh"
                },
            }
        },
        utxos: {
            hint: "List wallet's available UTXOs, or a selection of UTXOs that sum up to the specified target value.",
            params: "[NANOWITS]",
            options: {
                join: { hint: "Join wallet's smaller UTXOs into a bigger one", },
                size: {
                    hint: "Minimum value of either selected (list/join) or output (split) UTXOs (default: 1 Wit)",
                    param: "WITS",
                },
                "smallest-first": {
                    hint: "Selects smallest UTXOs first (default: false)",
                },
                split: { hint: "Split wallet's UTXOs into multiple UTXOs having a specific size", },
            }
        },
        validators: {
            hint: "List validators treasuring delegated stake from the specified wallet.",
        },
    },
    subcommands: {
        address, providers,
    },
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// CLI SUBMODULE COMMANDS ============================================================================================

function address(flags) {
    // TODO
    if (!flags) flags = {}
    const provider = new toolkit.Provider(flags?.provider)
    const wallet = new toolkit.Wallet(process.env.WITNET_TOOLKIT_WALLET_KEY || "masterkey", provider)
    console.info(helpers.colors.lmagenta("twit1f0am8c97q2ygkz3q6jyd2x29s8zaxqlxcqltxx"))
    qrcode.generate("twit1f0am8c97q2ygkz3q6jyd2x29s8zaxqlxcqltxx")
}

function providers(flags) {
    const provider = new toolkit.Provider(flags?.provider)
    const wallet = new toolkit.Wallet(process.env.WITNET_TOOLKIT_WALLET_KEY || "masterkey", provider)
    wallet.provider.endpoints.forEach(url => {
        console.info(helpers.colors.magenta(url))
    })
}
